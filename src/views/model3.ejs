<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Construct Ease</title>
    <link rel="stylesheet" href="/public/style.css">
    
    
    </head>
    <body>
        <div id="container">
            <div id="3d-model-container1"></div>
            <div id="3d-model-container2"></div>
        </div>
      <div id="3d-model-container"></div>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/loaders/GLTFLoader.js"></script>
<script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/js/controls/OrbitControls.js"></script>
    <script>
     
    //  import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.js';
    // import { GLTFLoader } from 'https://cdn.jsdelivr.net/gh/mrdoob/three.js@r128/examples/jsm/loaders/GLTFLoader.js';
    // Set up Three.js scene
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);
    const renderer = new THREE.WebGLRenderer();
    const light = new THREE.PointLight(0xFFFFFF,1); // White light

    light.position.set(0, 50, 50); 
    scene.add(light);
    const blight = new THREE.PointLight(0xFFFFFF,1); // White light

    blight.position.set(0, 50, -50);// Position the light
    scene.add(blight);
    const leftLight = new THREE.PointLight(0xFFFFFF,1); // Left light
leftLight.position.set(-50, 50, 0); 
scene.add(leftLight);

const rightLight = new THREE.PointLight(0xFFFFFF,1); // Right light
rightLight.position.set(50, 50, 0); 
scene.add(rightLight);
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById('3d-model-container').appendChild(renderer.domElement);
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    // Load GLB model
    const loader = new THREE.GLTFLoader();
    const textureLoader = new THREE.TextureLoader();
    const texture = textureLoader.load('/public/gltf_embedded_6.jpeg'); // Replace with your texture file path
    loader.load('/public/Building.glb', function (gltf) {
        const model = gltf.scene;
        // Rest of your code...
        model.traverse((o) => {
        if (o.isMesh) o.material.map = texture;
    });
           
            scene.add(model); // Add model to scene

            // Adjust the camera position if needed
            camera.position.z =40;
        });
      

        // Animation/render loop
        function animate() {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        }
        animate();
    </script>
 <div id="3d-model-container2"></div>
 <script>
     // Set up Three.js scene for the second model
     const scene2 = new THREE.Scene();
     const camera2 = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1,250);
     const renderer2 = new THREE.WebGLRenderer();
     renderer2.setSize(window.innerWidth, window.innerHeight);
     document.getElementById('3d-model-container2').appendChild(renderer2.domElement);
     const llight = new THREE.PointLight(0xFFFFFF,1); // White light

llight.position.set(20,50,30); 
scene2.add(llight);
const bblight = new THREE.PointLight(0xFFFFFF,1); // White light

bblight.position.set(20, 50, -30);// Position the light
scene2.add(bblight);
const lleftLight = new THREE.PointLight(0xFFFFFF,1); // Left light
lleftLight.position.set(-20, 50, 0); 
scene2.add(lleftLight);

const rrightLight = new THREE.PointLight(0xFFFFFF,1); // Right light
rrightLight.position.set(20, 50, 0); 
scene2.add(rrightLight);
const controls2 = new THREE.OrbitControls(camera2, renderer2.domElement);
     // Load the second model
     const textureLoader2 = new THREE.TextureLoader();
    
     const loader2 = new THREE.GLTFLoader();
     loader2.load('/public/3bhk3.glb', function (gltf) {
         const model2 = gltf.scene;
         
         scene2.add(model2);
            camera2.position.z = 10;
         
     });
 
     // Animation/render loop for the second model
     function animate2() {
         requestAnimationFrame(animate2);
         renderer2.render(scene2, camera2);
     }
     animate2();
 </script>
</body>
</html>
